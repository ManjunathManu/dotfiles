set hidden

set nocompatible

" set the runtime path to include Vundle and initialize

set rtp+=~/.vim/bundle/Vundle.vim

set mmp=10000

set pumheight=10

set updatetime=300

" Give more space for displaying messages.
set cmdheight=2

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" To get correct comment highlighting
autocmd FileType json syntax match Comment +\/\/.\+$+

call vundle#begin()

" let Vundle manage Vundle

" "Plugin 'VundleVim/Vundle.vim'

Plugin 'tpope/vim-fugitive'

Plugin 'scrooloose/nerdtree'

" Plugin 'w0rp/ale'

Plugin 'ctrlpvim/ctrlp.vim'

" typescript syntax highlighter
Plugin 'leafgarland/typescript-vim'

Plugin 'neoclide/coc.nvim', {'branch': 'release'}

" Plugin 'valloric/youcompleteme'

" Vim plugin for intensely orgasmic commenting
Plugin 'scrooloose/nerdcommenter'

Plugin 'lifepillar/vim-solarized8'

Plugin 'mattn/emmet-vim'

" Javascript syntax highlighting
Plugin 'pangloss/vim-javascript'

" Jsx syntax highlighting
Plugin 'mxw/vim-jsx'

" Plugin 'vim-airline/vim-airline'

" Adds file type glyphs/icons to popular Vim plugins:
" NERDTree, vim-airline, Powerline, Unite, vim-startify and more
" Plugin 'ryanoasis/vim-devicons'

" Theme
" Plugin 'tomasiser/vim-code-dark'

" Plugin 'heavenshell/vim-jsdoc'

" Plugin 'tpope/vim-surround'

" CSS/SASS/html color preview
" Plugin 'gko/vim-coloresque'


" All of your Plugins must be added before the following line
call vundle#end()

filetype plugin indent on

" Put your non-Plugin stuff after this line


" ******************** VIM Options ********************


" Change leader key to <space>
let mapleader=" "

filetype off

syntax on

set number

set relativenumber

set background=dark

set signcolumn=yes

colorscheme solarized8_high

set ttimeoutlen=10

set mouse=a

set encoding=UTF-8

set tabstop=2 shiftwidth=2 expandtab

" :highlight Normal ctermfg=white ctermbg=black


" Folders to ignore in vimgrep search
" Commma seperated list
set wildignore+=**/node_modules/**,**/documentation/**,**/target/**,**/logs/**
" set wildignore+=**/documentation/**

set foldmethod=indent

set foldlevel=1

set t_Co=256

set t_ut=

let solarized_visibility="high"

" Remove white space in git diff
set diffopt+=iwhite

set diffexpr=""

set pastetoggle=<F3>

set ignorecase

set wildmenu
" Uncomment below line to hightlight the work being searched
" set hlsearch


" ******************** Key Binding ********************


:imap jj <Esc> " Press jj to exit insert mode

" Auto Complete quotes and parens
inoremap " ""<left>

inoremap ' ''<left>

inoremap ( ()<left>

inoremap [ []<left>

inoremap { {}<left>

inoremap {<CR> {<CR>}<ESC>O

inoremap {;<CR> {<CR>};<ESC>O

" Press Esc twice to set no search highlight
" nnoremap <esc><esc> :silent! nohls<cr>

" Replace current word under the cursor
:nnoremap <Leader>s :%s/\<<C-r><C-w>\>//g<Left><Left>


" Cause > to autocomplete tag
" ><CR> to auotcomplete and put cursor in new line
" ><Leader> to cancel autocompletion for this time
" Only in HTML and XML files
" function s:CompleteTags()
  " inoremap <buffer> > ></<C-x><C-o><Esc>:startinsert!<CR><C-O>?</<CR>
  " inoremap <buffer> ><Leader> >
  " inoremap <buffer> ><CR> ></<C-x><C-o><Esc>:startinsert!<CR><C-O>?</<CR><CR><Tab><CR><Up><C-O>$
" endfunction
" autocmd BufRead,BufNewFile *.html,*.xml call s:CompleteTags()

" Presss TAB for autocompletion
inoremap <silent><expr> <TAB> coc#pum#visible() ? coc#pum#confirm() : "\<C-g>u\<TAB>"

inoremap <Leader>Y "+y

" check if your vim version supports it
if has('persistent_undo')
  " turn on the feature
  set undofile

  " directory where the undo files will be stored
  set undodir=$HOME/.vim/undo
endif


" ******************** air-line ********************


" let g:airline_powerline_fonts = 1
" let g:airline_theme = 'codedark'
" let g:typescript_ignore_typescriptdoc = 1



" ******************** Nerd-tree ********************

" Toggle nerd tree
nmap <F6> :NERDTreeToggle<CR>

" Reveal current file in nerd tree
nmap <F7> :NERDTreeFind<CR>

let g:NERDTreeMouseMode=3


" ******************** Ctrl p ********************


" Exclude node_modules during search
let g:ctrlp_custom_ignore = '\v[\/](node_modules|target|dist)|(\.(swp|ico|git|svn))$'

" Default file search 
let g:ctrlp_by_filename=1

" " Default mode as file
" let g:ctrlp_cmd = 'CtrlPMRU'


autocmd BufNewFile,BufRead *.ts setlocal filetype=typescript

autocmd BufNewFile,BufRead .env* setlocal filetype=sh

if !exists("g:ycm_semantic_triggers")
  let g:ycm_semantic_triggers = {}
endif


let g:ycm_semantic_triggers['typescript'] = ['.']
let g:ycm_semantic_triggers['java'] = ['.']

set completeopt-=preview


" ************************* ALE *********************************

" nmap <leader>d <Plug>(ale_go_to_definition-split)

" nmap <leader>g <Plug>(ale_go_to_definition)

" nmap <leader>f <Plug>(ale_fix)

" nmap <leader>r <Plug>(ale_find_references)

" nmap <leader>h <Plug>(ale_hover)

" let g:ale_linters = {
  " \ 'java': ['javac']
  " \ }

" let g:ale_fixers = {
			" \   '*': ['remove_trailing_lines', 'trim_whitespace'],
			" \   'javascript': ['eslint'],
			" \   'typescript': ['tslint'],
			" \   'css': ['prettier'],
			" \   'scss': ['prettier'],
			" \   'java': ['google_java_format']
			" \ }

" let g:ale_pattern_options = {
      " \ '/home/manju/Workspace/Source-code/Lightmetrics/nodejs/microservices/*': {
      " \      'ale_fixers': { 'javascript': ['eslint', 'prettier'] }
      " \ }
      " \ }


" Set this variable to 1 to fix files when you save them.
" let g:ale_fix_on_save = 0

" let g:ale_enabled = 0

" Dont run linter on text change
" let g:ale_lint_on_text_changed = 'never'


" Enable completion where available.
" This setting must be set before ALE is loaded.
" let g:ale_completion_enabled = 1


" let g:ale_sign_column_always = 1

" let g:ale_sign_error = '>>'

" let g:ale_sign_warning = '--'

" nmap <silent> <C-k> <Plug>(ale_previous_wrap)

" nmap <silent> <C-j> <Plug>(ale_next_wrap)


" ******************* NERD Commenter *******************************


" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1



" ********************JS DOC ***************************************


" nmap <silent> <C-l> <Plug>(jsdoc)

" "search for the last function declaration and puts your jsdoc above it
" nmap <silent> <C-l> ?function<cr>:noh<cr><Plug>(jsdoc)



"********************EMMET********************


let g:user_emmet_install_global = 0

autocmd FileType html,css EmmetInstall



"********************VIM javascript(Syntax highlight)********************

let g:javascript_plugin_jsdoc = 1

let g:javascript_plugin_ngdoc = 1


" ******************** Python ***************************************

let python_highlight_all = 1


" ********************* Java ****************************************
let g:syntastic_java_checkers = []

let g:EclimFileTypeValidate = 0

" ******************** COC ********************
let g:coc_global_extensions = [
  \ 'coc-tsserver',
  \ 'coc-java',
  \ 'coc-angular',
  \ 'coc-css',
  \ 'coc-eslint',
  \ 'coc-highlight',
  \ 'coc-html',
  \ 'coc-python',
  \ 'coc-snippets',
  \ 'coc-prettier'
  \]

" Use :Prettier to format current buffer.
command! -nargs=0 Prettier :CocCommand prettier.formatFile

" Use `[e` and `]e` to navigate diagnostics errors
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [e <Plug>(coc-diagnostic-prev-error)
nmap <silent> ]e <Plug>(coc-diagnostic-next-error)
nmap <silent> le <Plug>(coc-list-diagnostics)
" Symbol renaming.
nmap <silent> rn <Plug>(coc-rename)
" Apply AutoFix to problem on the current line.
nmap <silent> qf  <Plug>(coc-fix-current)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
nmap <silent> pd :sp<CR><Plug>(coc-definition)

" Format selected range
nmap <leader>f  <Plug>(coc-format-selected)

" Use h for show documentation in preview window
nnoremap <leader>h :call <SID>show_documentation()<CR>

" " Use <tab> to confirm completion.
" if exists('*complete_info')
  " inoremap <expr> <tab> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<tab>"
" else
  " inoremap <expr> <tab> pumvisible() ? "\<C-y>" : "\<tab>"
" endif

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

function! s:show_documentation()
  if &filetype == 'vim'
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction
